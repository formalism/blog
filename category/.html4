<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>思いつきメモ</title>
	<meta name="description" content="">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta name="author" content="tu1978">

	<!-- HTML5 shim, for IE6-8 support of HTML elements -->
	<!--[if lt IE 9]>
		<script src="https://formalism.github.io/blog/theme/html5.js"></script>
	<![endif]-->

	<!-- Styles -->
	<link href="https://formalism.github.io/blog/theme/bootstrap.min.css" rel="stylesheet">
	<link href="https://formalism.github.io/blog/theme/local.css" rel="stylesheet">
	<link href="https://formalism.github.io/blog/theme/pygments.css" rel="stylesheet">

	<!-- Feeds -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-58071669-1', 'auto');
  ga('send', 'pageview');
</script>
</head>
<body>
	<div class="topbar">
	  <div class="topbar-inner">
		<div class="container-fluid">
		  <a class="brand" href="https://formalism.github.io/blog/">思いつきメモ</a>
			<ul class="nav">
					<li class="active"><a href="https://formalism.github.io/blog/category/.html"></a></li>
			</ul>
			<p class="pull-right"><a href="https://formalism.github.io/blog/archives.html">[archives]</a> <a href="https://formalism.github.io/blog/tags.html">[tags]</a></p>
		</div>
	  </div>
	</div>

	<div class="container-fluid">
	  <div class="sidebar">
		<div class="well">
			<div class="social">
			<h3>Social</h3>
			<ul>
				<li><a href="http://twitter.com/tu1978">twitter</a></li>
			</ul>
			</div>
			<h3>Tags</h3>
			<ul>
			  <li><a href="https://formalism.github.io/blog/tag/agda.html">Agda (3)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/android.html">Android (4)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/blogging.html">Blogging (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/c.html">C# (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/c-amp.html">C++ AMP (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/center-exam.html">Center Exam (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/clojure.html">clojure (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/clsql.html">CLSQL (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/fpga.html">FPGA (20)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/gadgets.html">Gadgets (6)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/haskell.html">Haskell (6)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/hls.html">HLS (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/linux.html">Linux (7)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/liquor.html">Liquor (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/lisp.html">Lisp (3)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/mac.html">Mac (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/math.html">Math (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/opencl.html">OpenCL (3)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/opensolaris.html">OpenSolaris (3)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/pc.html">PC (4)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/printer.html">Printer (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/programming.html">Programming (49)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/shu-ping.html">書評 (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/software.html">Software (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/solr.html">Solr (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/sqlite3.html">SQLite3 (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/starbucks.html">Starbucks (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/tcf.html">TCF (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/type-theory.html">Type Theory (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/uncategorized.html">Uncategorized (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/web.html">Web (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/wi2.html">Wi2 (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/windows.html">Windows (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/zynq.html">Zynq (9)</a></li>
			</ul>
		</div>
	  </div>
	  <div class="content">
<div class="page-header"><h1>思いつきメモ <small></small></h1></div>
<div class='article'>
	<h2>「歩く歩道」は駄洒落では無い</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/04/walking-sidewalk/">2013-04-14 14:09:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/uncategorized.html">Uncategorized</a> </div>
	<div class="summary"><p>つい先日、「動く歩道」、つまり下のようなものがある町で、ゆっくり自転車を走らせていたら、数m離れたところにいた数名の人たちのうちの一名が「歩く歩道」という言葉を発した。もちろん自分はそこを平常心で通り過ぎたのだが、「え、"歩く歩道"って...。動く歩道のことやろ！歩道は歩くためのものなので、なんという同義反復。これこそトートロジー。」と思って内心笑っていた。が、しかし、<a href="http://netallica.yahoo.co.jp/news/20130207-00000032-cobs">地方あるある・大阪編</a>を読んで、実は大阪では、関東でいう「動く歩道」は「歩く歩道」と呼ばれている、という驚愕の事実を人生初めて知った。いやはや、これが単なる駄洒落や間違いではなかったとは...。かなり衝撃を受けた。 <br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://pds.exblog.jp/pds/1/200811/22/82/b0042282_23314957.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="http://pds.exblog.jp/pds/1/200811/22/82/b0042282_23314957.jpg" width="320" /></a></div><br /></p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/04/walking-sidewalk/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>FPGA+HFT</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/03/fpgahft/">2013-03-29 14:53:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/programming.html">Programming</a> <a href="https://formalism.github.io/blog/tag/fpga.html">FPGA</a> </div>
	<div class="summary"><p>最近モチベーションが下がっている。ネットを徘徊していたら、ちょっと面白いネタを見つけた：<br /><br /><a href="http://d.hatena.ne.jp/kazunori_279/20130107/1357521548">文字通り「ネットワークがコンピューター」な金融HFTでのFPGAの使われ方</a><br /><br />ここ数年HFTの分野では、FPGAで処理を実装するのがはやってきている、ということ。リンク先の記事からもリンクされている、<a href="http://cufp.org/videos/parallel-scientific-awesome-haskell-fpga-compiler">Parallel Scientific: The Awesome Haskell FPGA Compiler</a>は以前すこし眺めていたが、今回の記事を読んで全体像の理解が少し進んだ。なるほど、こんなところでも回路設計をしてしまう時代になったのね、という感じ。<br /><br />10Gbpsのネットワークスイッチに入れてしまうというのであれば、当然Alteraで言えばStratixクラスの1個何十万もするFPGAを使うのだろう。外付けメモリもDDRみたいなレイテンシの大きいものではなく、RLDRAMやQDRといった、個人的には使用しているのをあまり見聞きしないタイプのメモリを使っているのではなかろうか。<br /><br />もしこういったものがTCP/IPで通信をしているとすれば、Ethernet MACのIPから出てくるパケットをステートマシンでTCP/IP部分をデコードしてやり、中身のデータに基づいてガリガリ計算し、その結果に基づいてこれまたステートマシンでEthernet MAC IPに売買パケットを流し込む、というような流れになっているのだろう。そして売買の結果は、メモリに書き込んでおき、ログとして保存。これでソフトウェアは一切介在せずに株式やら為替の売買を実行する、と。もちろん、売買条件の設定などの初期化操作はソフトウェアで行うはずだが。<br /><br />妄想するとなかなか面白そうな分野だなぁ。クオンツの元でブイブイ(死語)いわせるプログラマのイメージが。なるほど、金融業界は計算機分野でも ...</p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/03/fpgahft/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>OpenCLの参考書籍</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/03/opencl-reference-docs/">2013-03-11 14:43:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/opencl.html">OpenCL</a> </div>
	<div class="summary"><p>最近自分で技術的な文章を書く気力が減退気味。googleで"OpenCL 入門"とかで検索してみても、和書に関連するページがヒットするものの、OpenCLの入門的なページはほとんどヒットしない。なので、参考までに：<a href="http://it-ebooks.info/book/1620/">OpenCL in Action</a>のリンク。ざっと眺めてみた感じでは、OpenCLの入門にふさわしい内容になっていると思う。データ型、カーネル記述方法、実例など、まんべんなく扱っている。ちなみに、リンク先サイトはすごい充実している。<div><br /></div><div>気が向いたらもう少しOpenCLについて取り上げたいと思うけれど、いつになることやら。はっきり言って、ここまでCPUが早くなってしまった現在、映像処理やシミュレーション、データマイニングといった分野でしかGPGPUは必要ないのではなかろうか？</div></p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/03/opencl-reference-docs/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>焼酎の麹の違い</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/02/shira-shin-ken/">2013-02-19 11:59:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/liquor.html">Liquor</a> </div>
	<div class="summary"><p>先日酒屋で焼酎を探した。入手しやすい価格帯のものは、かなり試したことのあるものばかりになってきたな...と思ったが、<a href="http://shirashinken.jp/intro/index.html">知心剣</a>というのはまだだった。最近CMで良くやっているので、印象に残っていた。というわけでこれを購入した。結果としてCMの効果性に貢献した。<br /><br />飲んでみると、「あれ、芋焼酎？」と感じた。いや、ラベルを確認しても、やはり麦焼酎。でも以前飲んだことのある<b>芋</b>焼酎<a href="http://www.kirishima.co.jp/products/imo/kuro-kirishima.html">黒霧島</a>と味が似ている？何が「普通の焼酎」と違うのか。調べてみたところ、どうやら、どちらも黒麹を使っていることが、味が似ていると感じた原因だと思われる。どちらも独特の甘みがある。では麦と芋の味の違いは何か？とういう疑問が出てきてしまった。黒霧島を飲んだのはずいぶん前なので、もう違いが分かるほど覚えていない...。自分が「普通の焼酎」と思っていたのは、白麹を使ったものだったのだと思う。<br /><br />こんなことは焼酎が好きな人にとっては常識だろう。機会があったら同じ黒麹の芋と麦で飲み比べてみたい。 </p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/02/shira-shin-ken/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>センター試験を1X年ぶりに解いてみた</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/01/1x/">2013-01-21 15:33:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/center-exam.html">Center Exam</a> </div>
	<div class="summary"><p>昨日(もう一昨日か)センター試験二日目が実施されました。<a href="http://www.toshin.com/center/sugaku-1a_mondai_0.html">リンク</a></p>

<p><p>私も1X年前にセンター試験を受けました。それ以来、新聞に掲載される問題を取っておくことはあったのですが、実際に解くことはしていませんでした。今年は何を思ったか少しだけ解いてみました。数学I/Aです。しかも問1,2だけ。</p> <p>いやはや、これだけでも結構大変でした。時間は正確に計りませんでしたが、多分30分くらいは掛かってしまった。問題自体はそれほど難しくはなかったものの、計算ミス1つと、引っかけにはまったミスが1つありました。間違えたのは、第一問<a href="3">2</a>と第二問(1)ケコサシのところ。後者は計算ミス。前者は考えが足りなかった。しかし、第一問<a href="3">2</a>は結構良問ではないかと思いました。私はまんまと罠にはまったわけですが。よーく考えればわかります。悔しいので以下に記します。</p> <p>「rは(pまたはq)であるための必要条件なのか、十分条件なのか」、という問いです。 これを確認するには、まずr=&gt;p\/qが成立するか、を確認する必要があります。成立するならrは「十分条件」でpまたはqは「必要条件」となります ...</p></p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/01/1x/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>nasneを使ってみてSonyの企業力に関心した</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2012/12/nasnesony/">2012-12-29 03:32:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/gadgets.html">Gadgets</a> </div>
	<div class="summary"><p>ふと思い立って、パソコンでテレビを視聴するために、<a href="http://www.nasne.com/">nasne</a>を購入した。これで何ができて何ができないか、ということについては各所によくまとめられているので、ここではあまり触れない。</p>

<p><p>この商品の一番の感想は、「よくこれだけのものをこの値段で販売できるな」というもの。HDDをはじめとして、トランスコーダ, DDR3メモリ、Ethernet PHYなどのハードウェア部品を揃えるだけでも、最低でも7000円か8000円くらいはかかるのではないか(分解記事は<a href="http://av.watch.impress.co.jp/docs/topic/20120719_547799.html">ここ</a>)。もちろん、組み立てや梱包のコストもある。販売価格が15,000円程度であるが、一体小売店への卸価格はどれほどなのだろうか。原価割れしてしまわないのか、とさえ心配になる。</p> <p>また、nasneはソフトウェアの出来が使い勝手の大部分を占める(ハードウェアで操作できる部分は無いに等しいので)。VAIO TV with nasne, torneといったソフトウェアも作成しサポートしなければならない。また、nasneの設定画面となるWebベースの画面も作成しなければならない。また、<a href="https://tv.so-net.ne.jp/chan-toru/#home">インターネットを介した予約サービス</a>のための作り込みも必要である。</p> <p>これらを設計/開発/生産/サポートするのに必要なコストはちょっと自分の経験からは想像できないが、よほど大量に販売できないと設計分のコストさえ捻出できないのではないか、と思う。あるいは製品単体ではなく、これを足がかりとして他の製品/サービスを購入してもらうという計画なのだろうか？</p> <p>いずれにせよ、大企業に蓄積されている高いノウハウを垣間見ることが出来ると感じる商品だった。</p> <p>以下は蛇足 ...</p></p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2012/12/nasnesony/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>ディスプレイのDPIの重要性に今さら気づいた</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2012/12/pc/">2012-12-04 06:34:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/pc.html">PC</a> </div>
	<div class="summary"><p>&nbsp;現在使用しているノートパソコンのディスプレイ解像度は、<br /><ul><li>13インチで1280x800画素</li><li>15インチで1920x1080画素</li></ul>の2機種。最近15インチの方ばかり使用している。久しぶりに13インチの方を使用したら、「目が悪くなってしまったのか？」と思うような違和感を感じた。おそらく解像度が低いことで、画像の輪郭が15インチよりぼけて見えてしまうので、そのように感じると思われる。<br /><br />近頃はパソコンもタブレットも相当解像度が高くなってきているので、このような環境に一度慣れてしまうと、低解像度の画面にはもう戻れなくなってしまうと感じる。</p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2012/12/pc/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>OpenCL & GPGPUメモ</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2012/11/opencl-gpgpu/">2012-11-30 14:58:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/programming.html">Programming</a> <a href="https://formalism.github.io/blog/tag/opencl.html">OpenCL</a> <a href="https://formalism.github.io/blog/tag/c-amp.html">C++ AMP</a> </div>
	<div class="summary"><p>さらにOpenCLやGPGPUの実験をしているが、そのメモ。<br /><ul><li>&nbsp;PCIeを介して、Device to Host, Host to Deviceの双方向転送が同時に実行されない。NVIDIAのGPUだと、Compute Capabilityが1.Xのものだと双方向の同時通信は無理のようなので、AMDもデバイスの制限があるのかも知れない。 これは、複数のコマンドキューを使用して、できるだけコマンドのオーバーラップを試みても、まだ未解決。 カーネルの実行中にデバイスメモリへの転送はできていることは確認できた。 </li></ul><ul><li>&nbsp;カーネルが使用するメモリを転送し終わってから、実際にカーネルが動作するまでに100ms以上のディレイが発生することがある。clEnqueueNDRangeKernelを呼び出して、直ちにclFlushを実行しているのだが...(このディレイはAMDの場合のみ。NVIDIAではそれほど遅くはない)</li></ul><ul><li>OpenCLは、単にカーネルを呼び出すにも、カーネル引数をsetKernelArgで一つずつ積み上げなければいけない。しかも、引数のサイズまで指定する必要がある。さらに調査してみたら、GPGPUとしては、<a href="http://msdn.microsoft.com/ja-jp/library/vstudio/hh265137.aspx">C++ AMP</a>という方法もある(ちなみに、リンク先は機械翻訳なので日本語が少し変)らしい。しかも、Visual C++ 2012だと標準で実装されており、<amp .h=".h">をインクルードするだけで使用できる。Microsoftの実装だと、Direct X 11のシェーダとしてカーネルが実行されるようだ。だが、C++ AMPの仕様自体は ...</amp></li></ul></p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2012/11/opencl-gpgpu/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>OpenCLメモ</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2012/11/opencl/">2012-11-16 09:04:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/programming.html">Programming</a> <a href="https://formalism.github.io/blog/tag/opencl.html">OpenCL</a> </div>
	<div class="summary"><p>OpenCLの実装メモ。 <br /><br /><b>- カーネルのコンパイルエラーを見つける方法</b><br />カーネルの記述が間違っていると、clBuildProgramが失敗する。clGetProgramBuildInfoを使うと、コンパイルエラーを取得できるが、もっと便利なのは、AMD APP KernelAnalyzerを使う方法。Source Codeのところに問題のソースを貼り付け、Compileボタンを押すと、エラーがある場合はCompiler Outputのところに、エラーが出力される。<br /><br /><b>- プロファイリングの方法</b><br />Code XLを使用する。新しいプロジェクトを作成し、プロファイルを取得したいプログラムを指定する。ProfileメニューからStart  Profilingを実行。GPU プロファイルにはApplication TraceとPerformance Countersの2種類がある。<br /><br />これはApplicatoin Traceの実行結果：<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-Vk8f61wd3TE/UKX9idkMIQI/AAAAAAAABiM/rAUVTWmfxUw/s1600/CodeXL.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="457" src="http://2.bp.blogspot.com/-Vk8f61wd3TE/UKX9idkMIQI/AAAAAAAABiM/rAUVTWmfxUw/s640/CodeXL.png" width="640" /></a></div><br />プログラム実行中に使用したOpenCL関数や、それに掛かった時間などがグラフ表示される。<br /><br />これがPerformance Countersの実行結果：<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-I1qaFWGYko8/UKX-FYSOaHI/AAAAAAAABiU/lJq6GmY00kw/s1600/PerformanceCounters.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="440" src="http://1.bp.blogspot.com/-I1qaFWGYko8/UKX-FYSOaHI/AAAAAAAABiU/lJq6GmY00kw/s640/PerformanceCounters.png" width="640" /></a></div><br />使用したカーネルや、カーネルを実行したときのworkgroup sizeもわかる。<br /><br />-<b> 雑感</b><br /><br />やっと一通りカーネルを実行できるようになった。実行時間だけをみると、CPUの5倍程度高速であるように思われるが、前後のメモリ転送が遅いので(とりわけCPU-&gt;GPU)、結局CPUで計算した方が3倍程度高速な状態。ちなみに、CPUのプログラムはVisual C++ Express 2012で64bitバイナリでO2最適化/AVX有効の場合 ...</p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2012/11/opencl/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>SQLiteで日付を扱うのって悩ましい</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2012/09/handling-dates-in-sqlite-is-confusing/">2012-09-12 14:14:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/programming.html">Programming</a> </div>
	<div class="summary"><p><p>MySQLなどとは異なり、SQLiteにはDate型が存在しない。そのため、SQLiteで日付データを扱う場合、文字列として、あるいは数値として扱うのが一般的であると思われる。</p> <p>文字列の場合、'2012-09-12'のようになるが、気をつけなくてはいけないのは、'2012-9-12'などとしてはいけないことだ。つまり、月日は、2ケタに達しない場合、0を左につけなければならない。次のような実験をしてみる：</p> <pre class="prettyprint"><br />sqlite&gt; select strftime('%Y-%m', '2012-09-12');<br />2012-09<br />sqlite&gt; select strftime('%Y-%m', '2012-9-12');<br />(何も表示されない)<br /></pre> <p>strftimeによって年月を得ようとしても、0が抜けていると思うように動作しない。また、strftimeで取得しなくても、例えば日付データでorder byをする場合、2ケタ化していないと、例えば09より1のほうが大きいとみなされてしまう。つまり、9月より1月のほうが後、とみなされてしまう。そのため、2ケタ化は必須の作業となる。<p> <p>もう一つ、数値として日付を扱う場合を考える。この場合も、どの時刻を基準とするか、という選択肢があるが、個人的にはユリウス日を使用するのが最も良いと思う ...</p></p></p></p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2012/09/handling-dates-in-sqlite-is-confusing/">more…</a>
	</div>
</div>	

<div class="pagination">
<ul>
		<li class="prev"><a href="https://formalism.github.io/blog/category/3.html">&larr; Previous</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/.html">1</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/2.html">2</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/3.html">3</a></li>
		<li class="active"><a href="https://formalism.github.io/blog/category/4.html">4</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/5.html">5</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/6.html">6</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/7.html">7</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/8.html">8</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/9.html">9</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/10.html">10</a></li>
		<li class="next"><a href="https://formalism.github.io/blog/category/5.html">Next &rarr;</a></li>
</ul>
</div>

	  </div>
	</div>
	<footer>
	  <p>Powered by <a href="http://getpelican.com/">Pelican</a>. Theme based on <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a>.</p>
	  <p>&copy; tu1978</p>
	</footer>
</body>
</html>