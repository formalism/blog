<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>思いつきメモ</title>
	<meta name="description" content="">
	<meta name="author" content="tu1978">

	<!-- HTML5 shim, for IE6-8 support of HTML elements -->
	<!--[if lt IE 9]>
		<script src="https://formalism.github.io/blog/theme/html5.js"></script>
	<![endif]-->

	<!-- Styles -->
	<link href="https://formalism.github.io/blog/theme/bootstrap.min.css" rel="stylesheet">
	<link href="https://formalism.github.io/blog/theme/local.css" rel="stylesheet">
	<link href="https://formalism.github.io/blog/theme/pygments.css" rel="stylesheet">

	<!-- Feeds -->




</head>
<body>
	<div class="topbar">
	  <div class="topbar-inner">
		<div class="container-fluid">
		  <a class="brand" href="https://formalism.github.io/blog/">思いつきメモ</a>
			<ul class="nav">
					<li class="active"><a href="https://formalism.github.io/blog/category/.html"></a></li>
			</ul>
			<p class="pull-right"><a href="https://formalism.github.io/blog/archives.html">[archives]</a> <a href="https://formalism.github.io/blog/tags.html">[tags]</a></p>
		</div>
	  </div>
	</div>

	<div class="container-fluid">
	  <div class="sidebar">
		<div class="well">
			<div class="social">
			<h3>Social</h3>
			<ul>
				<li><a href="http://twitter.com/tu1978">twitter</a></li>
			</ul>
			</div>
			<h3>Tags</h3>
			<ul>
			  <li><a href="https://formalism.github.io/blog/tag/agda.html">Agda (3)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/android.html">Android (4)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/c.html">C# (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/c-amp.html">C++ AMP (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/center-exam.html">Center Exam (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/clojure.html">clojure (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/clsql.html">CLSQL (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/fpga.html">FPGA (20)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/gadgets.html">Gadgets (6)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/haskell.html">Haskell (5)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/linux.html">Linux (7)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/liquor.html">Liquor (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/lisp.html">Lisp (3)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/mac.html">Mac (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/math.html">Math (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/opencl.html">OpenCL (3)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/opensolaris.html">OpenSolaris (3)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/pc.html">PC (4)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/printer.html">Printer (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/progra.html">Progra (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/programming.html">Programming (49)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/shu-ping.html">書評 (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/software.html">Software (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/solr.html">Solr (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/sqlite3.html">SQLite3 (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/starbucks.html">Starbucks (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/tcf.html">TCF (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/uncategorized.html">Uncategorized (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/web.html">Web (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/wi2.html">Wi2 (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/windows.html">Windows (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/zynq.html">Zynq (9)</a></li>
			</ul>
		</div>
	  </div>
	  <div class="content">
<div class="page-header"><h1>思いつきメモ <small></small></h1></div>
<div class='article'>
	<h2>ZYBOの実験</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2014/04/zybo/">2014-04-27 01:50:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/zynq.html">Zynq</a> <a href="https://formalism.github.io/blog/tag/fpga.html">FPGA</a> </div>
	<div class="summary"><p>先日digilentに注文しておいた<a href="http://www.digilentinc.com/Products/Detail.cfm?NavPath=2,719,1197&amp;Prod=ZYBO">ZYBO</a>が届いた。<br /><br />いきなり確認不足だった点：<br />- VGAポートは抵抗分割のFPGA直結だった。しかもRGB565(計16bit)階調しかない。<br />-水晶はPSの50MHzが接続されているだけ？と思ったが、マニュアルを読んでみると、ethernet PHYから125MHzが出ていて、それがPL(pin L16)に接続されているみたいだ。こちらは、PHYRSTBをHighにしないと出力されない。<br /><br />早速、4/25付けで上記ページにアップロードされているZYBO Base System Designをダウンロードし、Vivado 2014.1で合成してSDKで動かしてみた(IPのアップグレードは薦められるままでOKだった)。main.cのAudoInitializeを実行すると、デバッガが止まってしまったので、とりあえず後回しにし、コメントアウトして実行すると、UARTでメニュー操作ができるようになった。<br /><br />HDMIを選択し、1920x1080@60pを選択すると、ちゃんとFull HD解像度で動作した。<br /><br />Zynq7010は、デバイスとしては公式には1.5Gbpsはサポートしていないはずだけれど、安定して動作しているっぽいな。Zynq恐るべし。<br /><br />HDMI出力のところは自分で作ろうかと思っていたのだが、サンプルがこんなに簡単に動いてしまうと、自作する気力は一気に萎えた。別のことに労力を使うことにしよう。<br /><br /><a href="http://marsee101.blog19.fc2.com/blog-entry-2803.html">marseeさん ...</a></p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2014/04/zybo/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>最近更新していないので何か書きますよ - AlteraとXilinxのIOについて</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2014/02/altera/">2014-02-15 15:36:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/fpga.html">FPGA</a> </div>
	<div class="summary"><p>XilinxとAlteraのFPGAで、特に外部との高速信号をやりとりをするときの考え方の違いについてまとめてみる。ただしGTPなどのGigabit Transceiverは考えない(まだ使ったことがないので)。<br /><br />Xilinxは、基本的にはIOモジュールにあるI(O)DELAYや、I(O)DDR, I(O)SERDESなどを自分でインスタンス化して使用するのが一般的な方法に思われる。これらを使用することで、動作時に信号のタイミングを動かすことができる。また、これらを使用するとシリアライズ/デシリアライズ部分の回路のタイミングはコンパイル毎にほぼ変化しないので、実際に動作させて、ちょうど良いタップを見つける、ということが可能である。<br /><br />また、ツールとしても、入出力のタイミング制約は、たとえ掛けたとしても、これらのモジュールの配置制約の方が優先される。したがって、あくまでもタイミング制約は、指示した配置をしたうえで、条件を満たすかどうかの確認の意味しかない。<br /><br />一方Alteraの場合は、タイミング制約ドリブンで配置配線が可能である。クロックとデータとの関係をちゃんと制約すれば、それを(入力の場合)内部のレジスタで正しくラッチできるようにレジスタを配置配線してくれる。レジスタはIOにあるものを使用するかもしれないし、そうでないかも知れない。また、動作時にIOのタイミングを変化させることはできないようだ(少なくともCycloneは)。ちなみに、AlteraのIOにも、スタティックに遅延量が決定する遅延ブロックが存在する。この遅延量もタイミング制約を満たせるようにツールが自動設定してくれる。<br /><br />以上から、自分の印象としては、静的にタイミング制約をすることで動作可能な場合はAlteraが便利で ...</p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2014/02/altera/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>Dependently Typed Metaprogramming (in Agda) メモ (3) tabulate</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/11/dependently-typed-metaprogramming-in_14/">2013-11-14 11:45:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/agda.html">Agda</a> </div>
	<div class="summary"><p>まだExercise 1.5の続き。<br /><br />tabulate : forall {n X} -&gt; (Fin n -&gt; X) -&gt; Vec X n<br />tabulate {n} f = ?<br /><br />を完成させる。{n}0としてC-cC-cをして、後はひたすらC-cC-aをすると、型としては正しい式が完成する。<br /><br />tabulate {zero} f = &lt;&gt;<br />tabulate {suc y} f = f fzero , tabulate (\ _ -&gt; f fzero)<br /><br />というもの。fにずっとfzeroを与えたものをn個集めたVecを答えとしている。でも多分これは問題の答えとしては期待通りのものではない。イメージとしては、fにfzero, fsuc fzero, fsuc (fsuc fzero), ... を引数に与えたものをn個集めたものを得たい。つまり、f 0, f 1 ...</p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/11/dependently-typed-metaprogramming-in_14/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>Dependently Typed Metaprogramming (in Agda) メモ (2) 有限集合Finについて</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/11/dependently-typed-metaprogramming-in_13/">2013-11-13 14:25:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/agda.html">Agda</a> </div>
	<div class="summary"><p><a href="https://formalism.github.io/blog/posts/2013/11/dependently-typed-metaprogramming-in/">Dependently Typed Metaprogramming (in Agda) メモ</a>の続き。</p>
<p>Exercise 1.5では、有限集合を表す型Finを定義している。<br /><br />data Fin : N -&gt; Set where<br />&nbsp;&nbsp; fzero : {n : N} -&gt; Fin (suc n)<br />&nbsp;&nbsp; fsuc : {n : N} -&gt; Fin n -&gt; Fin (suc n)<br /><br />ここで、fzero, fsucとしたのは、自然数の型で使用しているzero, sucと区別しやすいようにするため。<br /><br />有限集合Finは、依存型言語で良く取り上げられる例題のようだが、理解するのは簡単ではないように思う。次のように考えると良いと分かった：<br /><br /><div style="text-align: left;">まず、Fin 0という型の要素があるか？と考えると、fzero, fsucどちらの構成子も、構成される型はFin (suc n)の形であるから、実際はFin ...</div></p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/11/dependently-typed-metaprogramming-in_13/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>Dependently Typed Metaprogramming (in Agda) メモ</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/11/dependently-typed-metaprogramming-in/">2013-11-13 09:42:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/agda.html">Agda</a> </div>
	<div class="summary"><p><a href="http://www.cl.cam.ac.uk/~ok259/agda-course-13/">Dependently Typed Metaprogramming (in Agda)</a>のメモ <br /><br /><b>Agdaの編集方法：</b> <br />Emacsのagda-modeを使えば、TeXの感覚で記号を入力できる。例：<br />太字のN : \bn <br />下付の数字 : _0, _1など<br />× : \times<br />→ : \rightarrow<br /><br />それと型構成子×は、open import Data.Productを書かないと使えなかった。また、最初はData.Productが開けなかったので、(custom-set-variables '(agda2-include-dirs (quote ("." "agda-lib-folder/src"))))を.emacs.elに追加する必要があった。<br /><br />------------------------------------<br />C-cC-lで現在開いているagdaファイルをロードしてチェックしてくれる。<br /><br />zip : forall {n S T} -&gt; Vec S n -&gt; Vec T n -&gt; Vec (S × T) n ...</p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/11/dependently-typed-metaprogramming-in/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>高速ビットマップ描画方法を調査</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/10/fast-bitmap-drawing-in-windows/">2013-10-19 14:56:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/programming.html">Programming</a> <a href="https://formalism.github.io/blog/tag/windows.html">Windows</a> </div>
	<div class="summary"><p>高速にメモリ上のデータをWindowsで表示する方法について調査してみた。<br /><br />経験上OpenCVは余り高速ではない。OpenGLでテクスチャに貼り付ける、という方法は高速で、プラットフォームにもあまり依存しない方法なのだが、カメラと対象物との位置関係で、勝手に変形されてしまう(これはOpenGLの目的からして当然であるが、ちゃんとデータを1対1で画像ピクセルに反映させたい、というような場合には問題となる)、という問題がある。<br /><br />また、OpenGLを使用する場合、ウィンドウ管理はGLUTに任せてしまうと、自分で作成するWindows上のウィンドウに描画するときに問題になる(理論上は可能なはずだが、面倒なのであまり調べていない)。<br /><b><br /></b><b>目標としては、Windowsで、自分で管理するウィンドウの内部に、高速にメモリ上のデータを表示したい。</b><br /><br />少し調べてみた結果、Vista以降のWindowsであれば、<a href="http://msdn.microsoft.com/ja-jp/library/windows/desktop/dd370990(v=vs.85).aspx">Direct2D</a>を使用するのが目的にかなっているようだ。もちろんWindowsにべったりになってしまうのだが、仕方がない。<br /><br />なんとなく、ID2D1HwndRenderTargetでBitmapを作成し、<a href="http://msdn.microsoft.com/ja-jp/library/windows/desktop/dd371155(v=vs.85).aspx">CopyFromMemory</a>を行って<a href="http://msdn.microsoft.com/ja-jp/library/windows/desktop/dd742844(v=vs.85).aspx">DrawBitmap</a>という流れで出来そうな気がしてきた。これだとオフスクリーンではないかも知れない。でも、この応用で何とかなりそうな気がする。<br /><br />今度実験してみよう。<br /><br />===================<br />ちなみに、調べてみると、MacではOpenGLの<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/conceptual/opengl-macprogguide/opengl_offscreen/opengl_offscreen.html">Framebuffer object</a>という方法があるようだ。自分がWindows上のOpenGLで試したときには、FBOはそれほどパフォーマンスが良くなかった印象がある。Macだとまた違うかも知れないが。 </p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/10/fast-bitmap-drawing-in-windows/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>今日の実験 - Media Foundationを使ってWebCamキャプチャ</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/10/media-foundationwebcam/">2013-10-13 15:25:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/programming.html">Programming</a> </div>
	<div class="summary"><p>いわゆるWebCamというものを、自分で作成するプログラムはどうすれば作成できるのか、というのを調査している。<br /><br />一番手っ取り早いのは、多分OpenCVを使用してcvQueryFrameで取ってくる方法だと思われるが、USB Video Classの機能をもっと使用することを考えているので(<a href="http://msdn.microsoft.com/en-us/library/windows/hardware/ff560772(v=vs.85).aspx">Extension Units</a>というのを使いたい)、cvQueryFrameは高レベルすぎる。<br /><br />Windows VistaからMedia FoundationというAPIが提供されており、これを使用するのが推奨のようだ。とりあえず<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd743690(v=vs.85).aspx">MFCaptureD3D Sample</a>のページから、サンプルプログラムをダウンロード(<a href="http://go.microsoft.com/fwlink/p/?linkid=163613" style="-webkit-text-stroke-width: 0px; color: #00188f; font-family: 'Segoe UI Semibold', 'Segoe UI', 'Lucida Grande', Verdana, Arial, Helvetica, sans-serif; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 1.429em; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;">Download from MSDN Code Gallery</a>というリンク)し、VS Express for Desktopでビルドして実行したら、正常にWebCamから動画をキャプチャ、表示できることが確認できた。試したカメラはYUV2形式のデータだった。<br /><br /><b>追記:</b> どうやらExtension Unitsは、DirectShowのAPIのようだ。果たしてMedia Foundationを使ったプログラムでも使用できるのか？よく分からない。さっぱりMedia Foundationは諦めて、DirectShowのサンプルでも探した方が良いかも知れない... <br /><br />DirectShowのプログラミングには、良い情報源(体系的な資料)が無いような気がする。知っている人は知っているが ...</p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/10/media-foundationwebcam/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>久々のラッキー</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/09/lucky-in-starbucks/">2013-09-07 14:47:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/starbucks.html">Starbucks</a> </div>
	<div class="summary"><p>先日、某所にてスタバに入った。注文したら、なにやら店員が「****(突然の質問だったので失念)はご存じですか？」と聞いてきた。「いいえ」と答えると、どうやら、スタバには「当たりレシート」なるものが存在するらしい。参考：<a href="http://matome.naver.jp/odai/2133386255732706201">【何でも一杯無料】スターバックス「当たりレシート」の全貌</a>。<br /><br />自分はおそらく100回も利用したことはないのではないかと思うが、この当たりレシートに運良く当選したらしい。あまり個人情報を答えなければならないようなアンケートだったら無視しようかと思ったが、そんなことはなく、利用店舗についてのいろいろな意見を調査するものだった(上のリンク先に質問ページが全部あるようだ)。<br /><br />超ラッキー! 久々にいいことあったなぁ。生きてて良かった! 何を注文するかじっくり考えよう。</p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/09/lucky-in-starbucks/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>今更ながら無線WAN回線を契約する(予定)</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/08/wan/">2013-08-10 07:27:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/gadgets.html">Gadgets</a> </div>
	<div class="summary"><p>これまではスマホでない方の携帯をずっと使用してきたけれど、利便性を考えて現代の便利品を揃えてみることにした。<br /><br />ただ、スマホは、まだ月額使用料が(自分が感じる価値からして)高いので、SIMフリー端末とMVNOのSIMを試してみよう、ということになった。<br /><br />いろいろ検討したのだけれど、<a href="http://www.expansys.jp/">EXPANSYS</a>というのが日本でSIMフリー端末を購入する店舗として有名らしい。ただ、こちらで販売されている端末は、基本的には技適マークがないものがほとんど。つまり、MVNOのSIMを差して、日本国内で使用するのは、厳密には違法行為ということになるらしい。もちろん、FCCの認可はあったりするので、米国で使用するのは問題ないだろう。<br /><br />---- ここは少し脱線 -----<br />もっとも、海外からの旅行者が、海外で販売されているSIMフリー端末を日本国内で使用するのは例外として認められているっぽい。SIMフリー端末もいろいろな周波数に対応しているわけだけれど、日本国内の電波と干渉してしまう、ということは無いのだろうか？全バンドが国内で使える訳ではないと思う(詳しくは未調査)。それとも、携帯は、基地局からの電波に周波数を合わせて、拾えた場合だけ電波を発信するという仕組みなのだろうか？<br />-------------------------------<br /><br />ということで、法的にも問題ない方法としては、技適マーク付きSIMフリー端末を使用することになる。SIMフリー端末を使用するには、自分でスマホを契約するか、SIMフリーになっているスマホを中古で購入する、(種類は少ないが)国内で販売されている技適あり新品SIMフリー端末を購入する、という方法が考えられる。さんざん考えた末、まずはお手軽に試すことにして、AWR-100TKというWiFIルータにした。端末は、手持ちのNexus7でしのぐ予定。<br /><br /><iframe frameborder="0" marginheight="0" marginwidth="0" scrolling="no" src="http://rcm-fe.amazon-adsystem.com/e/cm?t=formalism-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=B00AEGM1WK&amp;ref=qf_sp_asin_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr" style="height: 240px; width: 120px;"></iframe> <br /><br />そして ...</p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/08/wan/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>CycloneVがやばい??</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/07/cyclonev/">2013-07-11 13:38:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/fpga.html">FPGA</a> </div>
	<div class="summary"><p>twitter経由で、CycloneVに重大な欠陥がある、というようなものを見つけた。<a href="http://www.altera.co.jp/literature/es/es_cyclone_v.pdf">Errata Sheet for CycloneV Devices</a>によると、重大な問題というのは、2番目のFractional PLL Phase Alignment Errorのようだ。PLLの位相が設定値よりもずれてしまう場合がある、というようなことらしい。影響を受ける事例としてLVDSが挙げられている。例えば、受信クロックをPLLでロックさせてnビットデシリアライズする、といったときに影響するのかも知れない。確かに、ここに問題があるとすれば、用途によっては使い物にならなくなってしまうかも知れない。</p>

<p><p>PLLの詳しい仕組みには詳しくないが、PLLだけでも<a href="http://www.amazon.co.jp/gp/product/4789830233/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4789830233&linkCode=as2&tag=formalism-22">本</a>が何冊も書けるくらいだから、アナログ回路の真骨頂なのだろう。それだけに問題も起きやすいところかも知れない。</p> <p>いずれにせよ、しばらくはXilinx優位ということになりそうだ。</p></p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/07/cyclonev/">more…</a>
	</div>
</div>	

<div class="pagination">
<ul>
		<li class="prev"><a href="https://formalism.github.io/blog/category/.html">&larr; Previous</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/.html">1</a></li>
		<li class="active"><a href="https://formalism.github.io/blog/category/2.html">2</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/3.html">3</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/4.html">4</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/5.html">5</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/6.html">6</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/7.html">7</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/8.html">8</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/9.html">9</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/10.html">10</a></li>
		<li class="next"><a href="https://formalism.github.io/blog/category/3.html">Next &rarr;</a></li>
</ul>
</div>

		<footer>
		  <p>Powered by <a href="http://getpelican.com/">Pelican</a>. Theme based on <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a>.</p>
		  <p>&copy; tu1978</p>
		</footer>
	  </div>

	</div>
</body>
</html>