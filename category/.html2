<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>思いつきメモ</title>
	<meta name="description" content="">
	<meta name="author" content="tu1978">

	<!-- HTML5 shim, for IE6-8 support of HTML elements -->
	<!--[if lt IE 9]>
		<script src="https://formalism.github.io/blog/theme/html5.js"></script>
	<![endif]-->

	<!-- Styles -->
	<link href="https://formalism.github.io/blog/theme/bootstrap.min.css" rel="stylesheet">
	<link href="https://formalism.github.io/blog/theme/local.css" rel="stylesheet">
	<link href="https://formalism.github.io/blog/theme/pygments.css" rel="stylesheet">

	<!-- Feeds -->




<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-58071669-1', 'auto');
  ga('send', 'pageview');
</script>
</head>
<body>
	<div class="topbar">
	  <div class="topbar-inner">
		<div class="container-fluid">
		  <a class="brand" href="https://formalism.github.io/blog/">思いつきメモ</a>
			<ul class="nav">
					<li class="active"><a href="https://formalism.github.io/blog/category/.html"></a></li>
			</ul>
			<p class="pull-right"><a href="https://formalism.github.io/blog/archives.html">[archives]</a> <a href="https://formalism.github.io/blog/tags.html">[tags]</a></p>
		</div>
	  </div>
	</div>

	<div class="container-fluid">
	  <div class="sidebar">
		<div class="well">
			<div class="social">
			<h3>Social</h3>
			<ul>
				<li><a href="http://twitter.com/tu1978">twitter</a></li>
			</ul>
			</div>
			<h3>Tags</h3>
			<ul>
			  <li><a href="https://formalism.github.io/blog/tag/agda.html">Agda (3)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/android.html">Android (4)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/blogging.html">Blogging (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/c.html">C# (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/c-amp.html">C++ AMP (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/center-exam.html">Center Exam (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/clojure.html">clojure (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/clsql.html">CLSQL (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/fpga.html">FPGA (20)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/gadgets.html">Gadgets (6)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/haskell.html">Haskell (5)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/hls.html">HLS (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/linux.html">Linux (7)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/liquor.html">Liquor (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/lisp.html">Lisp (3)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/mac.html">Mac (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/math.html">Math (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/opencl.html">OpenCL (3)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/opensolaris.html">OpenSolaris (3)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/pc.html">PC (4)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/printer.html">Printer (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/programming.html">Programming (49)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/shu-ping.html">書評 (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/software.html">Software (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/solr.html">Solr (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/sqlite3.html">SQLite3 (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/starbucks.html">Starbucks (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/tcf.html">TCF (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/uncategorized.html">Uncategorized (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/web.html">Web (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/wi2.html">Wi2 (2)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/windows.html">Windows (1)</a></li>
			  <li><a href="https://formalism.github.io/blog/tag/zynq.html">Zynq (9)</a></li>
			</ul>
		</div>
	  </div>
	  <div class="content">
<div class="page-header"><h1>思いつきメモ <small></small></h1></div>
<div class='article'>
	<h2>Linux on Zynq (ZYBO)</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2014/05/linux-on-zynq-zybo/">2014-05-06 09:39:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/zynq.html">Zynq</a> <a href="https://formalism.github.io/blog/tag/linux.html">Linux</a> <a href="https://formalism.github.io/blog/tag/fpga.html">FPGA</a> </div>
	<div class="summary"><p>今度はZYBOにてLinuxを動作させてみようと挑戦した備忘録。<br /><br />まとまった情報がなかなか見つからなくて苦労したが、基本はMasahiro Yamadaさんの、"<a href="http://masahir0y.blogspot.jp/2014/01/u-boot-linux-kernel-zynq.html">U-Boot と Linux Kernel のメインラインで Zynq を動かす</a>"を参考にした。<br /><br />STEP0: DTCの準備 はそのまま実施した。<br /><br />STEP1: U-Bootのビルド ではまった。結論としては、ARMのクロスコンパイラとして<a href="http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition/">CodeSourcery Lite</a>を使用した(単にXilinxからgccをダウンロードするのが面倒だったので。Xilinxのgccで動くかは試していないため不明)。<br /><br />最初は<a href="http://www.linaro.org/downloads/">LinaroのGCC</a>でU-Bootをビルドしていたが、どうしても動作しなかった。U-Bootはlibcにも依存しているようで、LinaroのGCCだとダメだと思われる。<br /><br />さらに、肝心のU-Bootは、オリジナルのものだと動かなかったので、<a href="https://github.com/Digilent/u-boot-Digilent-Dev">DigilentのU-Boot</a>を使用した。この手順は、Ryuzさんの"<a href="http://ryuz.txt-nifty.com/blog/2014/04/zybozynqu-boot-.html">ZYBO(Zynq)のu-bootのビルドまで</a>"に従った。CROSS_COMPILEのところは、(CodeSourceryなので)arm-none-eabi-にした。makeでu-boot.binができた(上記手順だとDTBはできないが、Linuxのブートは可能)。<br /><br />STEP2 ...</p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2014/05/linux-on-zynq-zybo/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>Zynq USBデバイステスト (ファームウェア)</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2014/04/zynq-usb/">2014-04-30 09:33:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/zynq.html">Zynq</a> <a href="https://formalism.github.io/blog/tag/programming.html">Programming</a> <a href="https://formalism.github.io/blog/tag/fpga.html">FPGA</a> </div>
	<div class="summary"><p><a href="https://formalism.github.io/blog/posts/2014/04/zynqusb/">Zynq USBデバイステスト (PC側ソフトウェア)</a>の続き。</p>
<p>C:\Xilinx\SDK\2014.1\data\embeddedsw\XilinxProcessorIPLib\drivers\usbps_v2_0 のexamplesに対するパッチ。
usbMain関数を呼び出すと動作開始。examplesのファイル達はusbフォルダにコピーされたものとする。</p>
<p>概要としては、examplesはUSB mass storageとして動作するので、バルク転送のTX/RX割り込みがかかるところを
横取り(XUsbPs_HandleStorageReqをコメントにする)して、所望のデータ処理に置き換える。
また、サンプルはTX割り込みがかからないようになっているので、TXのビットをorして有効にする。</p>
<hr />
<p>diff -cr examples/xusbps_ch9_storage.c usb/xusbps_ch9_storage.c</p>
<div class="highlight"><pre>examples/xusbps_ch9_storage.c    2014-04-16 23:53:27.579740500 +0900
<span class="gd">--- usb/xusbps_ch9_storage.c ...</span></pre></div> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2014/04/zynq-usb/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>ZynqでのUSBデバイステスト (PC側ソフトウェア)</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2014/04/zynqusb/">2014-04-30 09:15:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/programming.html">Programming</a> </div>
	<div class="summary"><p>Zynqに内蔵されているUSBポートをデバイスモードで使用できるかテスト中。</p>
<p>とりあえず最低限のループバックでは動作したので、汚いがコードを貼っておく。</p>
<p>まずは、WinUSBを使用したPC側のソース。ほぼMicrosoftのドキュメントをくっつけただけ。インクルードの順番だけは結構重要だったりする。winusb.lib, setupapi.libをリンクすること。</p>
<p>ドライバはインストール済みの前提。</p>
<hr />
<div class="highlight"><pre><span class="cp">#include &quot;stdafx.h&quot;</span>
<span class="c1">//#include &quot;usb.h&quot;</span>
<span class="cp">#include &quot;windows.h&quot;</span>
<span class="cp">#include &quot;usb100.h&quot;</span>
<span class="cp">#include &quot;usb200.h&quot;</span>
<span class="cp">#include &quot;SetupAPI.h&quot;</span>
<span class="cp">#include &quot;winusb.h&quot;</span>
<span class="cp">#include &quot;winusbio.h&quot;</span>
<span class="cp">#include &quot;strsafe.h&quot;</span>

<span class="cp">#define MAX_DEVPATH_LENGTH (1024)</span>

<span class="c1">// {9F68AD5A-84E0-4E0F-8EF3-11139532FD22}</span>
<span class="n">GUID</span> <span class="n">GUID_DEVINTERFACE_OSRUSBFX2</span> <span class="o">=</span> <span class="p">{</span> <span class="mh">0x9F68AD5AUL</span><span class="p">,</span> <span class="mh">0x84E0</span><span class="p">,</span> <span class="mh">0x4E0F</span><span class="p">,</span> <span class="p">{</span> <span class="mh">0x8E</span><span class="p">,</span> <span class="mh">0xF3 ...</span></pre></div> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2014/04/zynqusb/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>WinUSBのinfファイル</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2014/04/winusbinf/">2014-04-30 05:21:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/programming.html">Programming</a> </div>
	<div class="summary"><p>ZynqのUSBデバイス機能を試すためにWinUSBを使用するための備忘録。<br /><br />WinUSBのドライバファイルはWDKに含まれているので、<a href="http://msdn.microsoft.com/en-us/windows/hardware/gg454513.aspx">このあたり</a>からインストールする。 WDK8.1からはVisual Studio 2013を<b>先に</b>インストールしてからWDKをインストールしないといけない、と書いてある。サボって後で面倒になるのも嫌なので、手順に従う。<br /><br />フォルダを作って、次に示すような感じでinfファイルを作成する。同じフォルダにamd64(64bit Windows7の例)というフォルダを作成し、その中にC:\Program Files (x86)\Windows Kits\8.1\Redist\wdf\x64からWdfCoInstaller01011.dll, winusbcoinstaller2.dll, WUDFUpdate_01011.dllをコピーする。<br /><br />infファイルの内容(例)。GUID, VID, PIDは適当に修正<br /><br />[Version]<br />Signature = "$Windows NT$"<br />Class = ZynqDeviceClass<br />ClassGuid={23AEE0D0-4E4B-4B03-8360-1FB07C0C3338}<br />Provider = %ProviderName ...</p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2014/04/winusbinf/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>ZYBOの実験</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2014/04/zybo/">2014-04-27 01:50:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/zynq.html">Zynq</a> <a href="https://formalism.github.io/blog/tag/fpga.html">FPGA</a> </div>
	<div class="summary"><p>先日digilentに注文しておいた<a href="http://www.digilentinc.com/Products/Detail.cfm?NavPath=2,719,1197&amp;Prod=ZYBO">ZYBO</a>が届いた。<br /><br />いきなり確認不足だった点：<br />- VGAポートは抵抗分割のFPGA直結だった。しかもRGB565(計16bit)階調しかない。<br />-水晶はPSの50MHzが接続されているだけ？と思ったが、マニュアルを読んでみると、ethernet PHYから125MHzが出ていて、それがPL(pin L16)に接続されているみたいだ。こちらは、PHYRSTBをHighにしないと出力されない。<br /><br />早速、4/25付けで上記ページにアップロードされているZYBO Base System Designをダウンロードし、Vivado 2014.1で合成してSDKで動かしてみた(IPのアップグレードは薦められるままでOKだった)。main.cのAudoInitializeを実行すると、デバッガが止まってしまったので、とりあえず後回しにし、コメントアウトして実行すると、UARTでメニュー操作ができるようになった。<br /><br />HDMIを選択し、1920x1080@60pを選択すると、ちゃんとFull HD解像度で動作した。<br /><br />Zynq7010は、デバイスとしては公式には1.5Gbpsはサポートしていないはずだけれど、安定して動作しているっぽいな。Zynq恐るべし。<br /><br />HDMI出力のところは自分で作ろうかと思っていたのだが、サンプルがこんなに簡単に動いてしまうと、自作する気力は一気に萎えた。別のことに労力を使うことにしよう。<br /><br /><a href="http://marsee101.blog19.fc2.com/blog-entry-2803.html">marseeさん ...</a></p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2014/04/zybo/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>最近更新していないので何か書きますよ - AlteraとXilinxのIOについて</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2014/02/altera/">2014-02-15 15:36:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/fpga.html">FPGA</a> </div>
	<div class="summary"><p>XilinxとAlteraのFPGAで、特に外部との高速信号をやりとりをするときの考え方の違いについてまとめてみる。ただしGTPなどのGigabit Transceiverは考えない(まだ使ったことがないので)。<br /><br />Xilinxは、基本的にはIOモジュールにあるI(O)DELAYや、I(O)DDR, I(O)SERDESなどを自分でインスタンス化して使用するのが一般的な方法に思われる。これらを使用することで、動作時に信号のタイミングを動かすことができる。また、これらを使用するとシリアライズ/デシリアライズ部分の回路のタイミングはコンパイル毎にほぼ変化しないので、実際に動作させて、ちょうど良いタップを見つける、ということが可能である。<br /><br />また、ツールとしても、入出力のタイミング制約は、たとえ掛けたとしても、これらのモジュールの配置制約の方が優先される。したがって、あくまでもタイミング制約は、指示した配置をしたうえで、条件を満たすかどうかの確認の意味しかない。<br /><br />一方Alteraの場合は、タイミング制約ドリブンで配置配線が可能である。クロックとデータとの関係をちゃんと制約すれば、それを(入力の場合)内部のレジスタで正しくラッチできるようにレジスタを配置配線してくれる。レジスタはIOにあるものを使用するかもしれないし、そうでないかも知れない。また、動作時にIOのタイミングを変化させることはできないようだ(少なくともCycloneは)。ちなみに、AlteraのIOにも、スタティックに遅延量が決定する遅延ブロックが存在する。この遅延量もタイミング制約を満たせるようにツールが自動設定してくれる。<br /><br />以上から、自分の印象としては、静的にタイミング制約をすることで動作可能な場合はAlteraが便利で ...</p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2014/02/altera/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>Dependently Typed Metaprogramming (in Agda) メモ (3) tabulate</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/11/dependently-typed-metaprogramming-in_14/">2013-11-14 11:45:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/agda.html">Agda</a> </div>
	<div class="summary"><p>まだExercise 1.5の続き。<br /><br />tabulate : forall {n X} -&gt; (Fin n -&gt; X) -&gt; Vec X n<br />tabulate {n} f = ?<br /><br />を完成させる。{n}0としてC-cC-cをして、後はひたすらC-cC-aをすると、型としては正しい式が完成する。<br /><br />tabulate {zero} f = &lt;&gt;<br />tabulate {suc y} f = f fzero , tabulate (\ _ -&gt; f fzero)<br /><br />というもの。fにずっとfzeroを与えたものをn個集めたVecを答えとしている。でも多分これは問題の答えとしては期待通りのものではない。イメージとしては、fにfzero, fsuc fzero, fsuc (fsuc fzero), ... を引数に与えたものをn個集めたものを得たい。つまり、f 0, f 1 ...</p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/11/dependently-typed-metaprogramming-in_14/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>Dependently Typed Metaprogramming (in Agda) メモ (2) 有限集合Finについて</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/11/dependently-typed-metaprogramming-in_13/">2013-11-13 14:25:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/agda.html">Agda</a> </div>
	<div class="summary"><p><a href="https://formalism.github.io/blog/posts/2013/11/dependently-typed-metaprogramming-in/">Dependently Typed Metaprogramming (in Agda) メモ</a>の続き。</p>
<p>Exercise 1.5では、有限集合を表す型Finを定義している。<br /><br />data Fin : N -&gt; Set where<br />&nbsp;&nbsp; fzero : {n : N} -&gt; Fin (suc n)<br />&nbsp;&nbsp; fsuc : {n : N} -&gt; Fin n -&gt; Fin (suc n)<br /><br />ここで、fzero, fsucとしたのは、自然数の型で使用しているzero, sucと区別しやすいようにするため。<br /><br />有限集合Finは、依存型言語で良く取り上げられる例題のようだが、理解するのは簡単ではないように思う。次のように考えると良いと分かった：<br /><br /><div style="text-align: left;">まず、Fin 0という型の要素があるか？と考えると、fzero, fsucどちらの構成子も、構成される型はFin (suc n)の形であるから、実際はFin ...</div></p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/11/dependently-typed-metaprogramming-in_13/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>Dependently Typed Metaprogramming (in Agda) メモ</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/11/dependently-typed-metaprogramming-in/">2013-11-13 09:42:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/agda.html">Agda</a> </div>
	<div class="summary"><p><a href="http://www.cl.cam.ac.uk/~ok259/agda-course-13/">Dependently Typed Metaprogramming (in Agda)</a>のメモ <br /><br /><b>Agdaの編集方法：</b> <br />Emacsのagda-modeを使えば、TeXの感覚で記号を入力できる。例：<br />太字のN : \bn <br />下付の数字 : _0, _1など<br />× : \times<br />→ : \rightarrow<br /><br />それと型構成子×は、open import Data.Productを書かないと使えなかった。また、最初はData.Productが開けなかったので、(custom-set-variables '(agda2-include-dirs (quote ("." "agda-lib-folder/src"))))を.emacs.elに追加する必要があった。<br /><br />------------------------------------<br />C-cC-lで現在開いているagdaファイルをロードしてチェックしてくれる。<br /><br />zip : forall {n S T} -&gt; Vec S n -&gt; Vec T n -&gt; Vec (S × T) n ...</p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/11/dependently-typed-metaprogramming-in/">more…</a>
	</div>
</div>	
<div class='article'>
	<h2>高速ビットマップ描画方法を調査</h2>
	<div class="well small">Permalink: <a class="more" href="https://formalism.github.io/blog/posts/2013/10/fast-bitmap-drawing-in-windows/">2013-10-19 14:56:00+09:00</a>
by <a class="url fn" href="https://formalism.github.io/blog/author/tu1978.html">tu1978 </a>
 in <a href="https://formalism.github.io/blog/category/.html"></a>
tags: <a href="https://formalism.github.io/blog/tag/programming.html">Programming</a> <a href="https://formalism.github.io/blog/tag/windows.html">Windows</a> </div>
	<div class="summary"><p>高速にメモリ上のデータをWindowsで表示する方法について調査してみた。<br /><br />経験上OpenCVは余り高速ではない。OpenGLでテクスチャに貼り付ける、という方法は高速で、プラットフォームにもあまり依存しない方法なのだが、カメラと対象物との位置関係で、勝手に変形されてしまう(これはOpenGLの目的からして当然であるが、ちゃんとデータを1対1で画像ピクセルに反映させたい、というような場合には問題となる)、という問題がある。<br /><br />また、OpenGLを使用する場合、ウィンドウ管理はGLUTに任せてしまうと、自分で作成するWindows上のウィンドウに描画するときに問題になる(理論上は可能なはずだが、面倒なのであまり調べていない)。<br /><b><br /></b><b>目標としては、Windowsで、自分で管理するウィンドウの内部に、高速にメモリ上のデータを表示したい。</b><br /><br />少し調べてみた結果、Vista以降のWindowsであれば、<a href="http://msdn.microsoft.com/ja-jp/library/windows/desktop/dd370990(v=vs.85).aspx">Direct2D</a>を使用するのが目的にかなっているようだ。もちろんWindowsにべったりになってしまうのだが、仕方がない。<br /><br />なんとなく、ID2D1HwndRenderTargetでBitmapを作成し、<a href="http://msdn.microsoft.com/ja-jp/library/windows/desktop/dd371155(v=vs.85).aspx">CopyFromMemory</a>を行って<a href="http://msdn.microsoft.com/ja-jp/library/windows/desktop/dd742844(v=vs.85).aspx">DrawBitmap</a>という流れで出来そうな気がしてきた。これだとオフスクリーンではないかも知れない。でも、この応用で何とかなりそうな気がする。<br /><br />今度実験してみよう。<br /><br />===================<br />ちなみに、調べてみると、MacではOpenGLの<a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/conceptual/opengl-macprogguide/opengl_offscreen/opengl_offscreen.html">Framebuffer object</a>という方法があるようだ。自分がWindows上のOpenGLで試したときには、FBOはそれほどパフォーマンスが良くなかった印象がある。Macだとまた違うかも知れないが。 </p> <a class="btn primary xsmall" href="https://formalism.github.io/blog/posts/2013/10/fast-bitmap-drawing-in-windows/">more…</a>
	</div>
</div>	

<div class="pagination">
<ul>
		<li class="prev"><a href="https://formalism.github.io/blog/category/.html">&larr; Previous</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/.html">1</a></li>
		<li class="active"><a href="https://formalism.github.io/blog/category/2.html">2</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/3.html">3</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/4.html">4</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/5.html">5</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/6.html">6</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/7.html">7</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/8.html">8</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/9.html">9</a></li>
		<li class=""><a href="https://formalism.github.io/blog/category/10.html">10</a></li>
		<li class="next"><a href="https://formalism.github.io/blog/category/3.html">Next &rarr;</a></li>
</ul>
</div>

		<footer>
		  <p>Powered by <a href="http://getpelican.com/">Pelican</a>. Theme based on <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a>.</p>
		  <p>&copy; tu1978</p>
		</footer>
	  </div>

	</div>
</body>
</html>